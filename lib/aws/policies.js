import { ok } from 'assert';

import { IAM } from 'aws-sdk';

import { createArn } from './arn.js';
import { invokeAsync } from './promises.js';

export const _iam = new IAM();

export const awsMaxManagedPolicyVersions  = 5;
export const awsResourceManagedPolicyPath = '/resource/';
export const awsPolicyVersion = '2012-10-17';

export async function _deleteOldestVersion(policyArn, versions) {
  let oldestVersionId;
  let oldestVersionTimestamp = null;
  for (let i=0; i < versions.length; i++) {
    const version     = versions[i];
    const versionDate = new Date(version.CreateDate).getTime();
    if (null === oldestVersionTimestamp || versionDate < oldestVersionTimestamp) {
      oldestVersionId         = version.VersionId;
      oldestVersionTimestamp  = versionDate;
    }
  }
  return await deleteManagedPolicyVersion(policyArn, oldestVersionId);
}

export async function deleteManagedPolicyVersion(policyArn, versionId) {
  const params = {
    PolicyArn:        policyArn,
    VersionId:        versionId,
  };
  return await invokeAsync(_iam, 'deletePolicyVersion', params);
}

export async function listManagedPolicyVersions(policyArn) {
  const params = {
    PolicyArn:        policyArn,
  };
  return await invokeAsync(_iam, 'listPolicyVersions', params);
}

export async function getPolicy(policyArn) {
  const params = {
    PolicyArn:    policyArn,
  };
  return await invokeAsync(_iam, 'getPolicy', params);
}

export function createManagedPolicyArnForResource(awsAccountId, name) {
  ok(awsAccountId, 'awsAccountId required');
  ok(name, 'name required');
  const policyArn = createArn({
    service:    'iam',
    account:    awsAccountId,
    resource:   `policy${awsResourceManagedPolicyPath}${name}`,
  });
  return policyArn;
}

export function documentFromAsset(asset, regions) {
  return documentFromAssets([ asset ]);
}

export function documentFromAssets(assets, regions) {
  return {
    Version: awsPolicyVersion,
    Statement: assets
      .map(asset => statementFromAsset(asset, regions)),
  };
}

export function statementFromAsset(asset, _regions) {
  let regions;
  if (asset.region) {
    regions = Array.isArray(asset.region) ? asset.region : [ asset.region ];
  }
  else {
    regions = _regions;
  }
  ok(Array.isArray(regions) && regions.length > 0,
    'no regions could be determined for asset statement');
  return {
    Effect:   'Allow',
    Action:   asset.permissions,
    Resource: regions
      .map(region =>
        createArn({
          region:   region,
          service:  asset.service,
          account:  global.betty.aws.accountId,
          resource: asset.name,
        })),
  };
}

export async function _createManagedPolicy(name, description, document) {
  const params = {
    PolicyName:       name,
    Description:      description,
    PolicyDocument:   JSON.stringify(document, null, 2),
    Path:             awsResourceManagedPolicyPath,
  };
  return await invokeAsync(_iam, 'createPolicy', params);
}

export async function _updateManagedPolicy(policyArn, document) {
  const data = await listManagedPolicyVersions(policyArn);
  const versions = data.Versions || [];
  if (versions.length >= awsMaxManagedPolicyVersions) {
    await _deleteOldestVersion(policyArn, versions);
  }
  const params = {
    PolicyArn:        policyArn,
    PolicyDocument:   JSON.stringify(document, null, 2),
    SetAsDefault:     true,
  };
  return await invokeAsync(_iam, 'createPolicyVersion', params);
}

export async function createManagedPolicy(awsAccountId, name, document) {
  const description = `Allows downstream resources to invoke ${name}. Generated by betty.`;
  const policyArn = createManagedPolicyArnForResource(awsAccountId, name);
  try {
    await getPolicy(policyArn);
    return await _updateManagedPolicy(policyArn, document);
  }
  catch (err) {
    if (err.code === 'NoSuchEntity') {
      return await _createManagedPolicy(name, description, document);
    }
    else {
      throw err;
    }
  }
}
