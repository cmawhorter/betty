'use strict';

const path        = require('path');
const fs          = require('fs');
const spawnSync   = require('child_process').spawnSync;

const rollup      = require('rollup');
const babel       = require('rollup-plugin-babel');
const nodeResolve = require('rollup-plugin-node-resolve');
const commonjs    = require('rollup-plugin-commonjs');
const json        = require('rollup-plugin-json');
const analyzer    = require('rollup-analyzer');
const builtins    = require('builtin-modules');

const rimraf      = require('rimraf');

const tryLoad     = require('../../common/try-load.js');
const createHandler = require('../lib/handler.js');

let cache;

exports.command = 'build';
exports.desc    = 'Compiles and transpiles source into a lambda-ready build';
exports.builder = {
  analyze: {
    boolean:        true,
    describe:       'Analyze the bundle and print the results',
  },
  verbose: {
    boolean:        true,
    alias:          'v',
    describe:       'Verbose output',
  }
};

function writePackageJson(target, unbundledKeys) {
  let packageJson = path.join(target, 'package.json');
  global.log.debug({ packageJson }, 'writing package.json');
  let dependencies = {};
  unbundledKeys.forEach(unbundledKey => {
    dependencies[unbundledKey] = global.betty.build.unbundled[unbundledKey];
  });
  fs.writeFileSync(packageJson, JSON.stringify({
    description:    'This file is automatically generated by betty for unbundled dependencies.',
    dependencies,
  }, null, 2));
}

function npmInstall(target) {
  let node_modules = path.join(target, 'node_modules');
  global.log.debug({ node_modules }, 'removing existing node_modules');
  rimraf.sync(node_modules);
  global.log.debug({ cwd: target }, 'running npm install');
  let res = spawnSync('npm', [ 'install', '--production' ], {
    stdio:      'inherit',
    cwd:        target + '/',
  });
  if (res.status !== 0) {
    global.log.warn({ code: res.status }, 'npm exited with non-zero');
    global.log.trace(res, 'spawn sync response');
  }
  else {
    global.log.debug('npm install success');
  }
}

function removeExternal(target, externals) {
  let node_modules = path.join(target, 'node_modules');
  global.log.debug({ node_modules, externals }, 'removing existing node_modules');
  externals.forEach(external => {
    let extDep = path.join(node_modules, external);
    rimraf.sync(extDep);
  });
  global.log.debug('removed external dependencies');
}

exports.handler = createHandler((argv, done) => {
  global.log.info('build started');
  global.log.debug({ argv }, 'arguments');
  let pkgJson = tryLoad.json(path.join(process.cwd(), 'package.json')) || {};
  let pkgJsonDependencies = Object.keys(pkgJson.dependencies || {});
  let unbundledKeys = Object.keys(global.betty.build.unbundled || {}).filter(unbundledKey => {
    if (pkgJsonDependencies.indexOf(unbundledKey) > -1) {
      global.log.trace({ dependency: unbundledKey, source: 'package.json' }, 'unbundled dependency found');
      return true;
    }
    try {
      fs.statSync(path.join(process.cwd(), 'node_modules', unbundledKey));
      global.log.trace({ dependency: unbundledKey, source: 'node_modules' }, 'unbundled dependency found');
      return true;
    }
    catch (err) {
      global.log.trace({ dependency: unbundledKey, err }, 'unbundled dependency not found');
    }
    return false;
  });
  let defaultRollupOptions = {
    entry:              path.join(process.cwd(), argv.source || 'src/main.js'),
    cache:              cache,
    plugins: [
      json(),
      nodeResolve({
        jsnext:         true,
        main:           true,
        skip:           [ 'aws-sdk' ].concat(builtins, unbundledKeys),
      }),
      commonjs({
        include:        'node_modules/**',
      }),
      babel({
        exclude:        'node_modules/**',
        babelrc:        false,
        presets:        [ [ 'es2015', { modules: false } ] ],
        plugins:        [ 'external-helpers' ],
      }),
    ],
    external:           [ 'aws-sdk' ].concat(builtins, unbundledKeys),
  };
  let buildConfig = argv.rollup || defaultRollupOptions;
  global.log.debug({ rollup: buildConfig }, 'build config');
  global.log.info('starting rollup');
  rollup.rollup(buildConfig).then(bundle => {
    cache = bundle; // build doesn't watch so this isn't used
    global.log.info('build complete');
    let outputConfig = {
      format:       'cjs',
      sourceMap:    true,
      dest:         argv.main || 'dist/index.js',
    };
    bundle.write(outputConfig);
    global.log.debug({ config: outputConfig }, 'output written');
    if (argv.analyze) {
      console.log('\n\n');
      analyzer.formatted(bundle).then(console.log).catch(console.error);
    }
    if (unbundledKeys.length) {
      global.log.debug({ keys: unbundledKeys }, 'processing unbundled');
      let target = path.dirname(path.resolve(argv.main || 'dist/index.js'));
      writePackageJson(target, unbundledKeys);
      npmInstall(target);
      removeExternal(target, [ 'aws-sdk' ]);
    }
    done(null);
  }, done);
});
